/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica3.eventos;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/**
 *
 * @author juan
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    //Usamos un objeto punto. para tener p.x y p.y
    Point p;
    Point lineaExtremoA, lineaExtremoB;
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * 
     * Por hacer implmeents del event.MouseListener netBeans tiene que sobrecargar todos los métodos
     * de la interfaz.
     * Todos lo métodos reciben como parámetro el evento. Esto sirve para saber donde se han realizado las 
     * acciones y cuales han sido: PREGUNTÁNDOLE AL EVENTO ¿Cómo le pregunto al evento? Con getSource.
     * 
     * if(evt.getSource() == boton) Si el botón es el boton llamado "boton" haz esto.
     * 
     * En vez de dejar parpadeando justo debajo de lo que hemos dicho se llama a otro método para hacerlo,
     * NetBEans hace esto siempre para que todo sea muy sistemático. Para que la estructura que nosotros veamos
     * siempre sea la misma independientemente de que la funcionalidad que se le de a los eventos. Así nos deja
     * la estructura simple. Por cada una de las acciones que estemos gestionando se añadirán mas lineas a esta
     * estructura. 
     * 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boton = new javax.swing.JButton();
        boton2 = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(formListener);
        addMouseListener(formListener);
        getContentPane().setLayout(new java.awt.FlowLayout());

        boton.setText("boton Prueba");
        boton.addMouseMotionListener(formListener);
        boton.addMouseListener(formListener);
        getContentPane().add(boton);

        boton2.setText("boton Prueba 2");
        boton2.addMouseListener(formListener);
        boton2.addActionListener(formListener);
        getContentPane().add(boton2);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener, java.awt.event.MouseMotionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == boton2) {
                VentanaPrincipal.this.boton2ActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == VentanaPrincipal.this) {
                VentanaPrincipal.this.formMouseClicked(evt);
            }
            else if (evt.getSource() == boton) {
                VentanaPrincipal.this.botonMouseClicked(evt);
            }
            else if (evt.getSource() == boton2) {
                VentanaPrincipal.this.boton2MouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == boton) {
                VentanaPrincipal.this.botonMouseEntered(evt);
            }
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == boton) {
                VentanaPrincipal.this.botonMouseExited(evt);
            }
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == VentanaPrincipal.this) {
                VentanaPrincipal.this.formMousePressed(evt);
            }
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == VentanaPrincipal.this) {
                VentanaPrincipal.this.formMouseReleased(evt);
            }
        }

        public void mouseDragged(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == boton) {
                VentanaPrincipal.this.botonMouseDragged(evt);
            }
            else if (evt.getSource() == VentanaPrincipal.this) {
                VentanaPrincipal.this.formMouseDragged(evt);
            }
        }

        public void mouseMoved(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    /*
    Si no entendieramos el código NetBeans nos mandará directamente aquí, dentro de botonMouseClicked
    para añadir el código que se ejecutará al realizar una acción sobre el boton, pero tenemos 
    que entender de donde viene el código y como ha sucedido todo el proceso.    
    */
    private void botonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonMouseClicked
        boton.setBackground(Color.red);
    }//GEN-LAST:event_botonMouseClicked

    private void botonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonMouseEntered
        boton.setBackground(Color.blue);
    }//GEN-LAST:event_botonMouseEntered

    private void botonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonMouseExited
        boton.setBackground(Color.green);
    }//GEN-LAST:event_botonMouseExited

    private void botonMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonMouseDragged
        boton.setBackground(Color.yellow);
    }//GEN-LAST:event_botonMouseDragged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        //Del JFrames
        //this.setBackground(Color.yellow);
        //this.getContentPane().setBackground(Color.red);
        
        //Con este método conseguimos la posición del ratón
        p=evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseClicked

    private void boton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton2MouseClicked
        boton2.setBackground(Color.red);
    }//GEN-LAST:event_boton2MouseClicked

    private void boton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton2ActionPerformed
        boton2.setBackground(Color.blue);
    }//GEN-LAST:event_boton2ActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        /*
        Obtenemos el primer punto de la linea al presionar (sin soltar) el ratón en cualquier
        parte del frame.
        */
        lineaExtremoA=evt.getPoint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        /*
        Registramos el levantamiento del click del ratón
        */
        lineaExtremoB=evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        /*
        Para ver como quedaría la linea conforme vamos dibujando la repintamos mientras
        arrastramos el ratón para al final dibujarla del todo al levantar el click (released).
        */
        lineaExtremoB=evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton;
    private javax.swing.JButton boton2;
    // End of variables declaration//GEN-END:variables

    public void paint(Graphics g){
        super.paint(g);
        /*
        La orden anterior asegura que se ejecute lo que ya hace el padre más lo que nostros queremos que haga.
        Si no se pone el super se supone que no nos sirve nada y lo quiero implementar yo, si lo pongo me sirve lo 
        anerior y yo añado código.
        Si no añadimos nada no vamos a notar diferencias puesto que estamos ejecutando el mismo código.
        
        Nosotros podemos hacer cosas a partir del objeto de GRaphics g que nos pasa y que no tenemos ni que crear ni 
        inicializar.
        
        */
        
        //Si hacemos esto en la posición 50, 50 tendremos un punto.
        //g.fillOval(50, 50, 10, 10);
        //Una linea
        //g.drawLine(70, 70, 200, 200);
        
       
        /*
        Revisar la librería Graphics !
        */
        if(p!=null) //Evitamos la excepción para que no se dibuje si nó está definido.
            g.fillOval(p.x-5, p.y-5, 10, 10);
        /*
        En lugar de ser 50, 50 tenemos que indicar la posición que nosotros queremos.
        
        ¿CUándo se ejecuta el método paint? ¿Cuando se visualiza? Si, pero también cuando cambiamos el tamaño,
        cuando la minimizamos, pero hacer un click no hace una llamada a paint. Para forzar la llamada a paint
        tenemos que usar el método repaint.
        */
        
        if(lineaExtremoA!=null && lineaExtremoB!=null)
            g.drawLine(lineaExtremoA.x, lineaExtremoA.y, lineaExtremoB.x, lineaExtremoB.y);
        
    }

}
