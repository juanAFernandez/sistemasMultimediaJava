Práctica 8

P/: usar instance of

Objetivo: Entorno que nos permite abrir, crear y guardar imágenes y sobre esta pintar todo lo que queramos tal y como tenemos hecho hasta la práctica 7.

Hasta ahora el lienzo es un lienzo infinito. Lo que conseguiremos es que al abrir lo qu ese abra sea una imagen. Aparecerán barras de progreso (se pueden limitar a que lleguen a tamaño máximo de la imagen).
Ahora lo que hacemos si es pintar sobre la imagen.

Vamos a heredar de Lienzo2D por lo que si está bien programado se guardará todo. Este proyecto será el inicio de 8 9 10 y 11.

Vamos a crear una clase Lienzo2DImagen

*
Métodos set y get de formas para que pueda devolverlas o recibirlas. Para lienzo 2D
*

Tenemos que añadir un BufferedImage. Una mala praxis sería tocar la 
clase Lienzo2D, lo ideal sería heredar de esta y crear una nueva.

*
Esta clase también podría considerarse en el futuro también como un objeto.
*

Hay que crearla como si fuera un formulario. Hay que crearla extendiendo de JPanel (como se hizo en la praáctica anterior y luego quitándole el nombre y extendiéndolo de nuestra clase.

VAmos a incorportar sólo una propiedad: una imagen.
Asociado a esta getImagen setImagen y el método paint para que pinte
la imagen

¿Qué es el paint component?
Si colocásemos el paint normal: no veriamos la formas, el 
paint del padre pintaría las formas pero después g.drawImage
pinta encima.
¿Y si lo cambiamos de orden?
Es lo lógico,primero pintaría la imagen y después los objetos. Pero 
cuando hacemos repaint y se usa paint de JPanel que borra todo, por tanto se borraría la img tb.
¿Entonces?
La soluci´on C

El método paint en la swing hace cuatro llamadas: o.Borra y después...paintComponent es el que pinta realmente los elementos.
Nosotros podríamos sobrecargar el paint entero pero también se puede sobrecargar alguna de sus funciones, la que ḿas se hace es paintComponent que es donde se pintan realmente.

Lo que hacemos es sobrecargar sólo paintComponent y ahí hacer drawImage
así conseguir que al visualizar un Lienzo2Dimagen se ejecuta su método paint que lo busca en su propia clase, si no está lo busca en el padre,
ahí lo encuentra y empieza a ejecutar. Cuando recibe la llamada a paintComponent primero lo busca en su clase y ahí si lo encuentra y es donde tiene la llamada a drawImage entonces lo ejecuta y después
devuelve el control de nuevo y sigue buscando el resto de funciones.
Por esto es por lo que sobrecargamos paintComponent.

EL método paint sobrecargado en Lienzo2D es el que llamamos en la heredada por tanto se tiene ahí en esa clase aunque esté programada
arriba.
Por eso lo único que tenemos que hacer es sobrecargar paintComponent que lo tenemos porque hemos heredado de todos los padres que hay en la herencia, desde la clase Component muy muy arriba.

!Se puede sobrecargar a cualquier nivel!
Siempre que se ejecute paint por debajo de Paint2D se ejecuta el último que se implementó.

Más en el artículo referenciado en la práctica, de lo que desencadena paint. Esto en AWT no funciona.


Barras de scroll:

Para que funcione tendremos que poner en la ventana interna un scrollPanel y dentro el lienzo imagen. Siempre compilar la librería antes.
Si después de todo esto no sale es porque sólo aparecen cuando la imagen es más grande que el tamaño de la ventana. Para evitar esto hay que indicarle al panel el tamaño de la ventana. En la práctica tenemos el código para especificar justo el tamaño de la imagen.

Después de esto viene la gestión de eventos de nuevo, abrir y guardar.

La imagen la crea en negro porque inicializa RGB a 0 y es negro. 
¿Cómo hacerlo blanco?
Primer reto.
No existe el método mágico:> tenemos que crear un rectángulo blanco.

TIp:
Cuando guardamos la imagen tal y como está el código sólo se guarda
la imagen pero no los objetos del vector. El vector no se está volcando. 
Segundo reto.

Los dos retos tienen que ver con lo que vimos de pintar en la img.


**Apunte final:

Está hecho un clip justo al tamaño de la imagen para que al salirnos de ahí no se vea nada.

Consejo para lo de guardar:
En vez de volcar el vector encima de la imagen es mejor crear una nueva y volcar en esta nueva su contenido. Crear una img.out y ahí volcar la original y luego las formas. Que ahí se unan las dos

