/*
        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU General Public License for more details.
        You should have received a copy of the GNU General Public License
        along with this program. If not, see <http://www.gnu.org/licenses/>.
      
        Copyright 2015 Juan A. Fernández Sánchez
*/
package Programa;

import static extras.Imprimir.Imprimir;
import java.awt.geom.Point2D;
import sm.image.Histogram;
import sm.jaf.graficos.Linea;
import sm.jaf.iu.Lienzo2DImagen;

/**
 * Elemento ventana uilizado dentro de escritorio.
 * Hereda de JInternalFrame, contiene los métodos básicos de control del linezo. 
 * @author Juan A. Fernández Sánchez
 * @see <a href="http://docs.oracle.com/javase/7/docs/api/javax/swing/JInternalFrame.html"> Clase JInternalFrame </a>
 */
public class VentanaInterna extends javax.swing.JInternalFrame {

       /**Variable de clase para contar el número de instancias que se han creado durante la ejecución del programa.
        */
       static int contadorVentanas = 0;
       /**
        * Referencia al padre para el paso de mensajes.
        */
       private VentanaPrincipal parent;
           
    
    /**
     * Constructor de ventana interna.
     * @param v Objeto de tipo VentanaPrincipal que será el padre para tener una referencia a el.
     */
    public VentanaInterna(VentanaPrincipal v) {        
        //Le pasamos el nombre al constructor del padre.
        super("Sin título " + (++contadorVentanas),true,true,true,true);
        //Cargamos la referencia al padre.
        this.parent=v;      
        initComponents();      
        /*Solo las ventanas internas tendrán habilitada la zona de cliping para que de la sensación de estar
        dibujando en un lienzo fintio. Para eso le decimos que este es el centra y con una variable booelana
        al redibujar se mostrará la zona de cliping.*/
        this.miLienzo2D.setCentral(true);
        
                 
        
    }
    
   
    /**
    Método que devuelve el objeto miLienzo2D desde donde es llamado para poder trabar con el y poder usar directamente
    sus métodos.
     * @return El linezo que tiene dentro Ventana Interna.
     * @see sm.jaf.iu.Lienzo2DImagen
    */
    public Lienzo2DImagen getLienzo(){        
        return this.miLienzo2D;
    }
    /**
     * Devuelve el nombre de la ventana.
     * @return Cadena de texto con el nombre de la ventana.
     */
    public String getNombreVentana(){    
        return this.getTitle();
    }
    /**
     * Para cambiar el nombre de la ventana.
     * @param nuevoNombre Nuevo nombre para la ventana.
     */
    public void setNombreVentana(String nuevoNombre){
        this.setTitle(nuevoNombre);
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelScroll = new javax.swing.JScrollPane();
        miLienzo2D = new sm.jaf.iu.Lienzo2DImagen();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        miLienzo2D.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                miLienzo2DMouseReleased(evt);
            }
        });
        miLienzo2D.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                miLienzo2DMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout miLienzo2DLayout = new javax.swing.GroupLayout(miLienzo2D);
        miLienzo2D.setLayout(miLienzo2DLayout);
        miLienzo2DLayout.setHorizontalGroup(
            miLienzo2DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        miLienzo2DLayout.setVerticalGroup(
            miLienzo2DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );

        panelScroll.setViewportView(miLienzo2D);

        getContentPane().add(panelScroll, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    /**
     * Programaicón de las tareas a realizar al activar una ventana interna.
     * @param evt Evento en gestión.
     */
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        
        /*
        Cuando seleccionamos una ventana interna tenemos que mandar los mensajes necesarios para que las herramientas
        se cambien según estén configuradas dentro de cada una de ellas.
        */
                        
        //Mensaje de depuración por terminal:
        Imprimir("Seleccionada ventana "+this.getNombreVentana());
        
        Imprimir("Relleno en ventana:"+this.getLienzo().getRellenoBoolean());
        
        //Le enviamos al padre el trazo del lienzo para que ajuste las herrmientas de seleccion.
        parent.setTrazoDefecto(this.getLienzo().getTrazo());
        
        //Le enviamos al padre el relleno del lienzo para que ajuste la herramienta
        if(this.miLienzo2D.getRellenoBoolean()){
            Imprimir("Tiene seleccionado el relleno");
            
            parent.setRellenoDefecto(this.getLienzo().getRelleno());
        }else{
            parent.desactivaRelleno();
        }
        
        
        //Activamos el histograma si el padre quiere:
        if(parent.getVerHistograma()){
            construyeHistrograma();
        }
        
        
        
        
    }//GEN-LAST:event_formInternalFrameActivated

    /**
     * Construye el histograma a partir de la imagen obtenida desde el lienzo.
     */
    public void construyeHistrograma(){
                    
            Histogram histo = new Histogram(getLienzo().getImage());
            
            
            
            Imprimir("Construyendo histograma:");
            Imprimir(" Nº de bandas: "+histo.getNumBands());
            Imprimir(" Nº de bins: "+histo.getNumBins());
            
            
            
            Imprimir(histo.getValue(0,   0));
            Imprimir(histo.getValue(255, 0));
            
            double valor;
 
            parent.getLinezoHistograma().delAllFiguras();
            int x=1;
            for(int i=0; i<256; i++){
                //Obtenemos el valor medio de las tres bandas.
                valor=(histo.getValue(i, 0)+histo.getValue(i,1)+histo.getValue(i,2))/3;
                //Pintamos una linea que lo represente.
                parent.getLinezoHistograma().addFigure(new Linea(new Point2D.Double(x,0), 
                                                                new Point2D.Double(x, valor)
                                                                )
                                                      );
                x+=1;
            }
                        
            parent.getLinezoHistograma().repaint();
    }

    /**
     * Al mover el ratón por la ventana interna.
     * @param evt Evento en gestión.
     */
    private void miLienzo2DMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miLienzo2DMouseMoved
       parent.setCoordenadas(evt.getPoint());
    }//GEN-LAST:event_miLienzo2DMouseMoved

    //Cuando se suelta un botón del ratón se construye el histograma si el parde lo permite.
    private void miLienzo2DMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miLienzo2DMouseReleased
        //Construimos el histograma cuando soltamos el ratón.
        construyeHistrograma();
    }//GEN-LAST:event_miLienzo2DMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sm.jaf.iu.Lienzo2DImagen miLienzo2D;
    private javax.swing.JScrollPane panelScroll;
    // End of variables declaration//GEN-END:variables
}
