/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica5;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.CubicCurve2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.QuadCurve2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;

/**
 *
 * @author juan
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d=(Graphics2D)g;
        
        pruebaShape(g2d);
        
        
    }
    
    
    
    public void pruebaShape(Graphics2D g2d){
        
        // ## LINEA ## //
        //Definimos los dos puntos que conforman la linea:
        Point2D p1 = new Point2D.Float(70,70);
        Point2D p2 = new Point2D.Float(200,200);
        //Creamos el objeto:
        Line2D linea = new Line2D.Float(p1,p2);        
        //Hacemos que la linea se dibuje:
        //g2d.draw(linea);
        
        /*
        Line2D es una clase abstracta, por eso no se puede hacer new Line2D. Esto es muy com√∫n en el resto de clases.
        */
        
        // ## RECTANGULO ## //
        Rectangle2D rectangulo = new Rectangle2D.Double(p2.getX(),p2.getY(), 100, 100);
        //g2d.draw(rectangulo);
        
        // ## RECTANGULO SUAVE ## //
        RoundRectangle2D rectanguloSuave = new RoundRectangle2D.Double(p2.getX(),p2.getY(),100,100,30,30);
        //g2d.draw(rectanguloSuave);
        
        
        // ## ELIPSE ## //
        Ellipse2D elipse = new Ellipse2D.Double(p2.getX(),p2.getY(),100,100);
        //g2d.draw(elipse);
        
        // ## ARCO ## //
        Arc2D arco = new Arc2D.Double(p2.getX(), p2.getY(), 200, 200, 90, 135, Arc2D.OPEN);
        //g2d.draw(arco);
        
        // ## CURVA CON PUNTO DE CONTROL ## //
        QuadCurve2D curva = new QuadCurve2D.Double(p2.getX(),p2.getY(),p2.getX()+50,p2.getY()+200,p2.getX()+100,p2.getY()+100);
        //g2d.draw(curva);
        
        // ## CURVA CON DOS PUNTOS DE CONTROL ## //
        CubicCurve2D curvaDosPuntos = new CubicCurve2D.Double(200,300,400,500,p1.getX(), p1.getY(),p2.getX(),p2.getY());
        g2d.draw(curvaDosPuntos);
        
        
        // ## POLILINEA ## //
        int x2Points[] = {200, 100, 200, 100};
        int y2Points[] = {300, 50, 50, 300};
        GeneralPath polilinea = new GeneralPath(GeneralPath.WIND_EVEN_ODD,x2Points.length);
        polilinea.moveTo (x2Points[0], y2Points[0]);

        for (int index = 1; index < x2Points.length; index++) {
             polilinea.lineTo(x2Points[index], y2Points[index]);
        };

        g2d.draw(polilinea);
        
        
        // ## AREA ## //
        Area areaA = new Area(rectangulo);
        Area areaB = new Area(elipse);
        
        areaA.intersect(areaB);
        g2d.draw(areaA);
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
