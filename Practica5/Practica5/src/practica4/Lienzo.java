/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica4;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;


/**
 *
 * @author juan
 */
public class Lienzo extends javax.swing.JPanel {

    
    //Sección de variables privadas:
    
    //Para el color:
    private Color color;
    //Para el punto donde se dibuja:
    private Point pA, pB;
    private boolean relleno, sentidoContrario;
    
    
    
    enum tipoHerramienta{PUNTO,LINEA,RECTANGULO,OVALO};
    private tipoHerramienta herramienta;
    
    
  
    //Constructor de Lienzo que lláma sólo a initComponents();
    public Lienzo() {
        initComponents();
        relleno=sentidoContrario=false;
    }

    
    
    //Get de color
    public Color getColor(){
        return color;
    }
    //Set de color
    public void setColor(Color color){
        this.color=color;
    }
    //Get de relleno
    public boolean getRelleno(){
        return relleno;
    }
    //Set de relleno
    public void setRelleno(boolean estado){
        relleno=estado;
    }
    //Get herramienta
    public tipoHerramienta getTipoHerramienta(){
        return herramienta;
    }
    //Set herramienta
    public void setTipoHerramienta(tipoHerramienta herramienta){
        this.herramienta=herramienta;
    }
    
    
    
    @Override
    public void paint(Graphics g){
        /*
        Si no llamamos al constructor del padre en la sobrecarga lo único que se vería sería el borde.
        Nosotros hemos definido el fondo blanco, eso está definido dentro del paint padre y tenermos
        que llamarlo para que surja efecto.
        */
        super.paint(g);
        
        //Lo primero que hacemos es
        g.setColor(color);
        
        //Si la herramienta es el lapiz (punto)
        if(this.herramienta==tipoHerramienta.PUNTO){            
            if(pA!=null) 
                g.fillOval(pA.x-5, pA.y-5, 10, 10);
        }else
        if(this.herramienta==tipoHerramienta.LINEA){
            if(pA!=null && pB!=null)
                g.drawLine(pA.x, pA.y, pB.x, pB.y);
        }else
        if(this.herramienta==tipoHerramienta.RECTANGULO){
            
            if(sentidoContrario)
//                this.x=Math.min(pA.x,pB.x);
  //              this.y=Math.min(pA.y,pB.y);
                System.out.println("pintando en sentido contrario");
                  if(pA!=null && pB!=null)
                    if(this.relleno)
                        g.fillRect(pA.x, pA.y, Math.abs(pB.x-pA.x), Math.abs(pB.y-pA.y));
                    else
                        g.drawRect(pA.x, pA.y, Math.abs(pB.x-pA.x), Math.abs(pB.y-pA.y));
            else               
                if(pA!=null && pB!=null)
                    if(this.relleno)
                        g.fillRect(pA.x, pA.y, Math.abs(pB.x-pA.x), Math.abs(pB.y-pA.y));
                    else
                        g.drawRect(pA.x, pA.y, Math.abs(pB.x-pA.x), Math.abs(pB.y-pA.y));
        }else
        if(this.herramienta==tipoHerramienta.OVALO)
            if(pA!=null && pB!=null)
                if(this.relleno)
                    g.fillOval(pA.x, pA.y, Math.abs(pB.x-pA.x), Math.abs(pB.y-pA.y));
                else
                    g.drawOval(pA.x, pA.y, Math.abs(pB.x-pA.x), Math.abs(pB.y-pA.y));
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        pA=evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        /*
        Obtenemos el primer punto de la linea al presionar (sin soltar) el ratón en cualquier
        parte del frame.
        */
        pA=evt.getPoint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        /*
        Para ver como quedaría la linea conforme vamos dibujando la repintamos mientras
        arrastramos el ratón para al final dibujarla del todo al levantar el click (released).
        */
        pB=evt.getPoint();
        System.out.println("A: "+pA.x+" "+pA.y+"  -  B: "+pB.x+" "+pB.y);
        if(pB.x<pA.x || pB.y<pA.y){
            this.sentidoContrario=true;
            System.out.println("Sentido contrario");
        }else{
            this.sentidoContrario=false;
        }
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        /*
        Registramos el levantamiento del click del ratón
        */
        pB=evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
