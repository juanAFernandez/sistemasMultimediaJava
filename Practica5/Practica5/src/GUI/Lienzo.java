/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


/**
 *
 * @author juan
 */
public class Lienzo extends javax.swing.JPanel {

    
    //Sección de variables privadas:
    
    //Para el color:
    private Color color;
    //Para el punto donde se dibuja:
    private Point pA, pB;
    private boolean relleno, sentidoContrario;
    
    /*
    En esta versión se podrán dibujar muchos objetos y además se podrá interactuar con ellos por lo que será
    necesario mantener una estructura en memoria donde poder almacenarlos. Usaremos una lista de figuras (Shapes) que 
    es lo que usa Graphics2D.
    */
    ArrayList <Shape> vShape = new ArrayList();
    
    
    Line2D lineaPrueba = new Line2D.Double();
    
    
    enum tipoHerramienta{PUNTO,LINEA,RECTANGULO,OVALO};
    private tipoHerramienta herramienta;
    
    
  
    //Constructor de Lienzo que lláma sólo a initComponents();
    public Lienzo() {
        initComponents();
        relleno=sentidoContrario=false;
    }

    
    
    //Get de color
    public Color getColor(){
        return color;
    }
    //Set de color
    public void setColor(Color color){
        this.color=color;
    }
    //Get de relleno
    public boolean getRelleno(){
        return relleno;
    }
    //Set de relleno
    public void setRelleno(boolean estado){
        relleno=estado;
    }
    //Get herramienta
    public tipoHerramienta getTipoHerramienta(){
        return herramienta;
    }
    //Set herramienta
    public void setTipoHerramienta(tipoHerramienta herramienta){
        this.herramienta=herramienta;
    }
    
    
    
    @Override
    public void paint(Graphics g){
        /*
        Si no llamamos al constructor del padre en la sobrecarga lo único que se vería sería el borde.
        Nosotros hemos definido el fondo blanco, eso está definido dentro del paint padre y tenermos
        que llamarlo para que surja efecto.
        */
        super.paint(g);
        //Ahora usamos la librería Graphics2D
        Graphics2D g2d=(Graphics2D)g;
        /*
        Para pintar ya no hacemos g.drawLine() sino que tendremos que declara un objeto de tipo Line2D y luego
        llamar a g2d para que lo pinte así: g2d.draw(<el objeto>).
        */
        
        //Ahora lo único que hacemos el recorrer el vector de shapes y dibujarlas.
        if(!vShape.isEmpty())
            for(Shape s:vShape) g2d.draw(s);
            
        //Número de objetos:
        System.out.print("Elementos en vShape: "+vShape.size()+"\n");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    //Gestión del evento presión del ratón en cualquier botón:
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        /*
        Obtenemos el primer punto necesario al presionar (sin soltar) el ratón en cualquier
        parte del frame.
        */
        pA=evt.getPoint();
        
        
        //Añadimos una nueva figura al vector de figuras al presionar el ratón, dependiendo del tipo de figura
        //que esté seleccionada en las herramientas.
        vShape.add(new Line2D.Double());
        
         
        /*
        if(this.herramienta==tipoHerramienta.LINEA)
            vShape.add(new Line2D.Double());
        else if(this.herramienta==tipoHerramienta.RECTANGULO)
            vShape.add(new Rectangle2D.Double());
        else if(this.herramienta==tipoHerramienta.OVALO)
            vShape.add(new Ellipse2D.Double());
        */
        
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        /*
        Para ver como quedaría la linea conforme vamos dibujando la repintamos mientras
        arrastramos el ratón para al final dibujarla del todo al levantar el click (released).
        */
       
        //Capturamos el segundo punto necesario para construir la linea:
        pB=evt.getPoint();
        
        //Sacamos el último objeto del array:
        //Line2D temporal = (Line2D) vShape.remove(vShape.size()-1);        
        
        //Line2D tmp =(Line2D) vShape.get((vShape.size()-1));
       
        
        /*
        Accedemos al último objeto del array y modificamos el segundo punto de la linea.
        
        */
        ((Line2D)vShape.get(vShape.size()-1)).setLine(pA, pB);
                        
        
        
        //Modificamos el objeto extraido seteandolo de nuevo con el punto A y el nuevo punto B a falta de un 
        //método directo para hacer sólo esto con el punto que queramos.
        //temporal.setLine(pA, pB);
        
        //Añadimos el nuevo objeto al array para que se vaya viendo la construcción del mismo mientras hacemos dragged.
        //vShape.add(temporal);
                
        //Como ya está en el vector llamamos a paint para que vuelva a pintar todos los objetos y este en el estado que está.
        this.repaint();        
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        /*
        Registramos el levantamiento del click del ratón
        */
      //  pB=evt.getPoint();
        //Al soltar el botón es cuando se guarda en el vector.

        this.repaint();
      
        
        
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
